//最短路径 
//#include<iostream>
//#include<string>
//#include<stack>
//using namespace std; 
//#define MAX 100
//#define INF 0x3f3f3f3f
//
//struct MGraph
//{
//	int edges[MAX][MAX];
//	int n,m;
//}G;
//
//int dist[MAX];
//int path[MAX];
//
//void dijkstra(int v)
//{
//	int set[MAX],i,j,min,u;
//	
//	//初始化dist[]、set[]、path[] 
//	for(i=0;i<G.n;i++)
//	{
//		dist[i] = G.edges[v][i];
//		set[i]=0;
//		if(G.edges[v][i] < INF)
//			path[i] = v;
//		else
//			path[i] = -1;
//	}
//	set[v]=1;
//	path[v]=-1;
//	
//	//找到当前dist[]中的最短路径，且该点未入集合set 
//	for(i=0;i<G.n-1;i++)
//	{
//		min = INF;
//		for(j=0;j<G.n;j++)
//		{
//			if(set[j]==0 && dist[j] < min)
//			{
//				u = j;
//				min = dist[j];
//			}
//		}
//	
//	set[u] = 1;
//	
//	for(j=0;j<G.n;j++)
//	{
//		if(set[j]==0 && dist[u]+G.edges[u][j] < dist[j])
//		{
//			dist[j] = dist[u] + G.edges[u][j];
//			path[j] = u;
//		}
//	} 
//}
//	
//}
//
////打印路径 
//void printfPath(int path[],int a)
//{
//	stack<int> s;
//	
//	while(path[a] != -1)
//	{
//		s.push(a);
//		a = path[a];
//	}
//	s.push(a);
//	while(!s.empty())
//	{
//		cout<<s.top()<<" ";
//		s.pop();
//	}
//	cout<<endl;
//}
//int main()
//{
//	int from,to,dis;
//	memeset(G.edges,INF,sizeof(G.edges));
//	cin>>n>>m;
//	for(int i=0;i<m;i++)
//	{
//		cin>>from>>to>>dis;
//		G.edges[from][to] = dis;
//	}
//	dijkstra(0);
//	printfPath(path,5);
//	for(int i=1;i<n;i++)
//		cout<<dist[i]<<endl;
//	return 0;
//}
